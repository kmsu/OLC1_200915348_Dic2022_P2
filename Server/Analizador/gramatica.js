/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,33],$V2=[1,35],$V3=[1,36],$V4=[1,37],$V5=[1,38],$V6=[1,39],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,34],$Vh=[2,5,30,31,32,33,34,35,62,64,67,68,70,71,72,73,74,75,76,77,78],$Vi=[1,48],$Vj=[1,69],$Vk=[1,59],$Vl=[1,58],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[2,26],$Vu=[1,73],$Vv=[1,71],$Vw=[1,72],$Vx=[30,81],$Vy=[19,27,29],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[19,29,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,64,82],$VO=[19,51],$VP=[19,29,47,48,51,52,53,64,82],$VQ=[1,141],$VR=[29,51,64],$VS=[1,148],$VT=[19,29,36,37,41,42,43,44,45,46,47,48,51,52,53,64,82],$VU=[19,29,41,42,43,44,45,46,47,48,51,52,53,64,82],$VV=[2,93],$VW=[29,51],$VX=[2,71],$VY=[1,171],$VZ=[1,172];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"IF":9,"WHILE":10,"SWITCH":11,"DO":12,"FOR":13,"BREAK":14,"CONTINUE":15,"RETURN":16,"PRINT":17,"INCREMENTALES":18,"PComa":19,"METODO":20,"FUNCION":21,"LLAMADAFUNCION":22,"VECTORES":23,"LLAMADAVECTOR":24,"TIPO":25,"LISTAVARIABLES":26,"Igual":27,"EXPRESION":28,"Coma":29,"Id":30,"resString":31,"resChar":32,"resBool":33,"resInt":34,"resDouble":35,"Mas":36,"Menos":37,"Por":38,"Div":39,"Mod":40,"MayorQue":41,"MenorQue":42,"Igualdad":43,"Distinto":44,"MayorIgual":45,"MenorIgual":46,"And":47,"Or":48,"Not":49,"ParA":50,"ParC":51,"Interrogacion":52,"DosPuntos":53,"Cadena":54,"Caracter":55,"Entero":56,"Decimal":57,"Verdadero":58,"Falso":59,"Incremento":60,"Decremento":61,"resIf":62,"LlaveA":63,"LlaveC":64,"ELSE":65,"resElse":66,"resWhile":67,"resSwitch":68,"CASE":69,"resCase":70,"resDefault":71,"resDo":72,"resFor":73,"resBreak":74,"resContinue":75,"resReturn":76,"resWrite":77,"resVoid":78,"PARAMETRO":79,"LISTAEXPRESION":80,"CorA":81,"CorC":82,"resNew":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"PComa",27:"Igual",29:"Coma",30:"Id",31:"resString",32:"resChar",33:"resBool",34:"resInt",35:"resDouble",36:"Mas",37:"Menos",38:"Por",39:"Div",40:"Mod",41:"MayorQue",42:"MenorQue",43:"Igualdad",44:"Distinto",45:"MayorIgual",46:"MenorIgual",47:"And",48:"Or",49:"Not",50:"ParA",51:"ParC",52:"Interrogacion",53:"DosPuntos",54:"Cadena",55:"Caracter",56:"Entero",57:"Decimal",58:"Verdadero",59:"Falso",60:"Incremento",61:"Decremento",62:"resIf",63:"LlaveA",64:"LlaveC",66:"resElse",67:"resWhile",68:"resSwitch",70:"resCase",71:"resDefault",72:"resDo",73:"resFor",74:"resBreak",75:"resContinue",76:"resReturn",77:"resWrite",78:"resVoid",81:"CorA",82:"CorC",83:"resNew"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[7,5],[7,3],[8,4],[26,3],[26,1],[25,1],[25,1],[25,1],[25,1],[25,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,3],[28,5],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[18,2],[18,2],[9,8],[65,2],[65,4],[65,0],[10,7],[11,7],[69,5],[69,5],[69,5],[69,5],[69,3],[69,0],[12,9],[13,14],[13,16],[14,2],[15,2],[16,3],[16,2],[17,5],[20,7],[20,8],[21,7],[21,8],[79,4],[79,2],[22,3],[22,4],[80,3],[80,1],[23,11],[23,9],[23,7],[24,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 analisis.putArbol($$[$0-1]); this.$=analisis; return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 26: case 85: case 89:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 16: case 17: case 19: case 56:
 this.$ = $$[$0]; 
break;
case 15: case 18: case 20:
 this.$ = $$[$0-1]; 
break;
case 21:
 console.error("Error Sintactico", this._$.first_line, this._$.first_column,"Token no valido: " + yytext); analisis.putError("Sintactico", this._$.first_line, this._$.first_column, "Token Inesperado: " + yytext); this.$ = null; 
break;
case 22:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null, this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new asignacion.default($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 25: case 88:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 27:
this.$ = new classTipo.default(TipoDato.CADENA, this._$.first_line, this._$.first_column);
break;
case 28:
this.$ = new classTipo.default(TipoDato.CARACTER, this._$.first_line, this._$.first_column);
break;
case 29:
this.$ = new classTipo.default(TipoDato.BOOLEANO, this._$.first_line, this._$.first_column);
break;
case 30:
this.$ = new classTipo.default(TipoDato.ENTERO, this._$.first_line, this._$.first_column);
break;
case 31:
this.$ = new classTipo.default(TipoDato.DECIMAL, this._$.first_line, this._$.first_column);
break;
case 32:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], this._$.first_line, this._$.first_column);
break;
case 33:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], this._$.first_line, this._$.first_column);
break;
case 34:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], this._$.first_line, this._$.first_column);
break;
case 35:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], this._$.first_line, this._$.first_column);
break;
case 36:
this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], this._$.first_line, this._$.first_column);
break;
case 37:
this.$ = $$[$0-2] > $$[$0];
break;
case 38:
this.$ = $$[$0-2] < $$[$0];
break;
case 39:
this.$ = $$[$0-2] == $$[$0];
break;
case 40:
this.$ = $$[$0-2] != $$[$0];
break;
case 41:
this.$ = $$[$0-2] >= $$[$0];
break;
case 42:
this.$ = $$[$0-2] <= $$[$0];
break;
case 43:
this.$ = $$[$0-2] && $$[$0];
break;
case 44:
this.$ = $$[$0-2] || $$[$0];
break;
case 45:
this.$ = !$$[$0];
break;
case 46:
this.$ = new aritmetica.default($$[$0], 'u', $$[$0], this._$.first_line, this._$.first_column);
break;
case 47:
this.$ = $$[$0-1];
break;
case 48:
 this.$ = new classIfTernario.default($$[$0-4], $$[$0-2], $$[$0],this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = new cadena.default($$[$0].substr(1, yyleng - 2), this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = new chhar.default($$[$0].charCodeAt(1), this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = new numero.default(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = new decimal.default(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = new booleano.default(true, this._$.first_line, this._$.first_column); 
break;
case 54:
 this.$ = new booleano.default(false, this._$.first_line, this._$.first_column); 
break;
case 55:
 this.$ = null; 
break;
case 57:
 this.$ = new id.default($$[$0], this._$.first_line, this._$.first_column); 
break;
case 58:
this.$ = new incremental.default($$[$0-1], '++', this._$.first_line, this._$.first_column);
break;
case 59:
this.$ = new incremental.default($$[$0-1], '--', this._$.first_line, this._$.first_column);
break;
case 60:
 this.$ = new classIf.default($$[$0-5], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 61:
 this.$ = $$[$0];
break;
case 62:
 this.$ = new classElse.default($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new classWhile.default($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 65:
 this.$ = new classSwitch.default($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 66: case 67: case 68:
 this.$ = new classCase.default($$[$0-3], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = new classCase.default($$[$0-3],$$[$0-1], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = new classCase.default(null, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new classDo.default($$[$0-2], $$[$0-6], this._$.first_line, this._$.first_column);
break;
case 73: case 74:
 this.$ = new classFor.default(null, $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 75:
 this.$ = new classBreak.default("break", this._$.first_line, this._$.first_column);
break;
case 76:
 this.$ = new classContinue.default("break", this._$.first_line, this._$.first_column);
break;
case 77:
 this.$ = new classReturn.default($$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = new classReturn.default(null, this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = new classPrint.default($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 80:
 this.$ = new classMetodo.default($$[$0-5], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 81:
 this.$ = new classMetodo.default($$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 82:
 this.$ = new classFuncion.default($$[$0-5], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 83:
 this.$ = new classFuncion.default($$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 84:
 this.$ = $$[$0-3]; this.$.push($$[$0]); 
break;
case 86:
this.$ = new classLlamadaFuncion.default($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 87:
this.$ = new classLlamadaFuncion.default($$[$0-3], this._$.first_line, this._$.first_column);
break;
case 90:
 this.$ = new declaraVector.default($$[$0-10], $$[$0-9], null, this._$.first_line, this._$.first_column); 
break;
case 91:
 this.$ = new declaraVector.default($$[$0-8], $$[$0-7], null, this._$.first_line, this._$.first_column); 
break;
case 92:
 this.$ = new AsignaVector.default($$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 93:
this.$ = new LlamadaVector.default(Number(0), this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{1:[3]},{2:$V0,5:[1,40],6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),{19:[1,42]},o($Vh,[2,16]),o($Vh,[2,17]),{19:[1,43]},o($Vh,[2,19]),{19:[1,44]},o($Vh,[2,21]),{26:45,30:[1,46]},{27:[1,47],29:$Vi},{50:[1,49]},{50:[1,50]},{50:[1,51]},{63:[1,52]},{50:[1,53]},{19:[1,54]},{19:[1,55]},{19:[1,57],22:67,24:68,28:56,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{50:[1,70]},o([27,29],$Vt,{50:$Vu,60:$Vv,61:$Vw,81:[1,74]}),{30:[1,75]},o($Vx,[2,27]),o($Vx,[2,28]),o($Vx,[2,29]),o($Vx,[2,30]),o($Vx,[2,31]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,15]),o($Vh,[2,18]),o($Vh,[2,20]),{19:[1,77],27:[1,76],29:$Vi},o($Vy,$Vt,{50:[1,78],81:[1,79]}),{22:67,24:68,28:80,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{30:[1,81]},{22:67,24:68,28:82,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:83,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:84,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{2:$V0,4:85,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{25:86,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},o($Vh,[2,75]),o($Vh,[2,76]),{19:[1,87],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM},o($Vh,[2,78]),{22:67,24:68,28:102,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:103,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:104,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VN,[2,49]),o($VN,[2,50]),o($VN,[2,51]),o($VN,[2,52]),o($VN,[2,53]),o($VN,[2,54]),o($VN,[2,55]),o($VN,[2,56]),o($VN,[2,57],{50:$Vu,81:[1,105]}),{22:67,24:68,28:106,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VO,[2,58]),o($VO,[2,59]),{22:67,24:68,28:109,30:$Vj,37:$Vk,49:$Vl,50:$Vm,51:[1,107],54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,80:108},{22:67,24:68,28:110,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{50:[1,111]},{22:67,24:68,28:112,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($Vh,[2,23]),{25:115,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,51:[1,113],79:114},{82:[1,116]},{19:[1,117],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM},o($Vy,[2,25]),{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,118],52:$VM},{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,119],52:$VM},{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,120],52:$VM},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,121],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{30:[1,122]},o($Vh,[2,77]),{22:67,24:68,28:123,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:124,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:125,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:126,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:127,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:128,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:129,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:130,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:131,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:132,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:133,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:134,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:135,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:136,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VP,[2,45],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o($VN,[2,46]),{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,137],52:$VM},{22:67,24:68,28:138,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,139],52:$VM},o($VN,[2,86]),{29:$VQ,51:[1,140]},o($VR,[2,89],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM}),{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM,82:[1,142]},{25:115,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,51:[1,143],79:144},{19:[1,145],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM},{63:[1,146]},{29:$VS,51:[1,147]},{30:[1,149]},{27:[1,150]},o($Vh,[2,24]),{63:[1,151]},{63:[1,152]},{63:[1,153]},{67:[1,154]},{27:[1,155]},o($VT,[2,32],{38:$VB,39:$VC,40:$VD}),o($VT,[2,33],{38:$VB,39:$VC,40:$VD}),o($VN,[2,34]),o($VN,[2,35]),o($VN,[2,36]),o($VU,[2,37],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD}),o($VU,[2,38],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD}),o($VU,[2,39],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD}),o($VU,[2,40],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD}),o($VU,[2,41],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD}),o($VU,[2,42],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD}),o($VP,[2,43],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ}),o([19,29,48,51,52,53,64,82],[2,44],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK}),{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM,53:[1,156]},o($VN,[2,47]),{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM,82:[1,157]},{19:[1,158]},o($VN,[2,87]),{22:67,24:68,28:159,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{19:$VV,27:[1,160]},{63:[1,161]},{29:$VS,51:[1,162]},o($Vh,[2,22]),{2:$V0,4:163,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{63:[1,164]},{25:165,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},o($VW,[2,85]),{63:[1,167],83:[1,166]},{2:$V0,4:168,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,4:169,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{64:$VX,69:170,70:$VY,71:$VZ},{50:[1,173]},{22:67,24:68,28:174,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{22:67,24:68,28:175,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($VN,$VV),o($Vh,[2,79]),o($VR,[2,88],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM}),{22:67,24:68,28:176,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{2:$V0,4:177,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{63:[1,178]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,179],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{30:[1,181]},{25:182,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6},{22:67,24:68,28:109,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,80:183},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,184],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,185],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{64:[1,186]},{54:[1,188],55:[1,187],56:[1,190],57:[1,189]},{53:[1,191]},{22:67,24:68,28:192,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{19:[1,193],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM},o([19,29,51,53,64,82],[2,48],{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM}),{19:[1,194],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,195],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},o($Vh,[2,82]),{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,197],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},o($VW,[2,84]),{81:[1,198]},{29:$VQ,64:[1,199]},o($Vh,[2,63],{65:200,66:[1,201]}),o($Vh,[2,64]),o($Vh,[2,65]),{53:[1,202]},{53:[1,203]},{53:[1,204]},{53:[1,205]},{2:$V0,4:206,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,207],52:$VM},{22:67,24:68,28:208,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},o($Vh,[2,92]),o($Vh,[2,80]),{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,209],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},o($Vh,[2,83]),{22:67,24:68,28:210,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{19:[1,211]},o($Vh,[2,60]),{9:212,62:$V7,63:[1,213]},{2:$V0,4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,4:216,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[2,70],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{19:[1,218]},{19:[1,219],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM},o($Vh,[2,81]),{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,52:$VM,82:[1,220]},o($Vh,[2,91]),o($Vh,[2,61]),{2:$V0,4:221,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:$VX,67:$V8,68:$V9,69:222,70:$VY,71:$VZ,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:$VX,67:$V8,68:$V9,69:223,70:$VY,71:$VZ,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:$VX,67:$V8,68:$V9,69:224,70:$VY,71:$VZ,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:$VX,67:$V8,68:$V9,69:225,70:$VY,71:$VZ,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},o($Vh,[2,72]),{18:226,30:[1,227]},{19:[1,228]},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,229],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{64:[2,66]},{64:[2,67]},{64:[2,68]},{64:[2,69]},{51:[1,230]},{27:[1,231],60:$Vv,61:$Vw},o($Vh,[2,90]),o($Vh,[2,62]),{63:[1,232]},{22:67,24:68,28:233,30:$Vj,37:$Vk,49:$Vl,50:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs},{2:$V0,4:234,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,51:[1,235],52:$VM},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,236],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{63:[1,237]},o($Vh,[2,73]),{2:$V0,4:238,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},{2:$V0,6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:20,25:22,26:23,30:$V1,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,62:$V7,64:[1,239],67:$V8,68:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg},o($Vh,[2,74])],
defaultActions: {40:[2,1],222:[2,66],223:[2,67],224:[2,68],225:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const decimal = require('../Analizador/Instrucciones/ExpresionesTerminales/Decimal');
    const numero = require('../Analizador/Instrucciones/ExpresionesTerminales/Numero');
    const booleano = require('../Analizador/Instrucciones/ExpresionesTerminales/Booleano');
    const cadena = require('../Analizador/Instrucciones/ExpresionesTerminales/Cadena');
    const chhar = require('../Analizador/Instrucciones/ExpresionesTerminales/Chhar');
    const id = require('../Analizador/Instrucciones/ExpresionesTerminales/Identificador');
    const incremental = require('../Analizador/Instrucciones/ExpresionesTerminales/Incremental');

    const TipoDato = require('../Analizador/Instrucciones/TablaSimbolos/TipoDato').TipoDato;
    const classTipo = require('../Analizador/Instrucciones/Tipo');

    const aritmetica = require('../Analizador/Instrucciones/OperacionesExpresiones/Aritmetica');

    const declaracion = require('../Analizador/Instrucciones/Declaracion');
    const asignacion = require('../Analizador/Instrucciones/Asignacion');
    const classPrint = require('../Analizador/Instrucciones/Print');
    const classBreak = require('../Analizador/Instrucciones/Break');
    const classContinue = require('../Analizador/Instrucciones/Continue');
    const classReturn = require('../Analizador/Instrucciones/Return');
    const classFuncion = require('../Analizador/Instrucciones/Funcion');
    const classMetodo = require('../Analizador/Instrucciones/Funcion');
    const classLlamadaFuncion = require('../Analizador/Instrucciones/LlamadaFuncion');
    const declaraVector = require('../Analizador/Instrucciones/DeclaraVector');
    const AsignaVector = require('../Analizador/Instrucciones/AsignaVector');
    const LlamadaVector = require('../Analizador/Instrucciones/LlamadaVector');

    const classIf = require('../Analizador/Instrucciones/EstructurasControl/If');
    const classElse = require('../Analizador/Instrucciones/EstructurasControl/Else');
    const classIfTernario = require('../Analizador/Instrucciones/EstructurasControl/IfTernario');
    const classSwitch = require('../Analizador/Instrucciones/EstructurasControl/Switch');
    const classCase = require('../Analizador/Instrucciones/EstructurasControl/Case');
    const classWhile = require('../Analizador/Instrucciones/EstructurasControl/While');
    const classDo = require('../Analizador/Instrucciones/EstructurasControl/Do');
    const classFor = require('../Analizador/Instrucciones/EstructurasControl/For');

    const classAnalisis = require('./Analisis');
    var analisis = new classAnalisis;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*Ignorar*/ 
break;
case 1: /*Ignorar*/
break;
case 2:return 'evaluar'; 
break;
case 3:return 'resNull';
break;
case 4:return 78;
break;
case 5:return 77;
break;
case 6:return 76;
break;
case 7:return 74;
break;
case 8:return 75;
break;
case 9:return 83;
break;
case 10:return 34;
break;
case 11:return 35;
break;
case 12:return 32;
break;
case 13:return 33;
break;
case 14:return 31;
break;
case 15:return 62;
break;
case 16:return 66;
break;
case 17:return 73;
break;
case 18:return 67;
break;
case 19:return 72;
break;
case 20:return 68;
break;
case 21:return 70;
break;
case 22:return 71;
break;
case 23:return 60;
break;
case 24:return 61;
break;
case 25:return 36;
break;
case 26:return 37;
break;
case 27:return 38;
break;
case 28:return 39;
break;
case 29:return 40;
break;
case 30:return 46
break;
case 31:return 42
break;
case 32:return 45
break;
case 33:return 41
break;
case 34:return 43
break;
case 35:return 44
break;
case 36:return 27
break;
case 37:return 47;
break;
case 38:return 48;
break;
case 39:return 49;
break;
case 40:return 58;
break;
case 41:return 59;
break;
case 42:return 50;
break;
case 43:return 51;
break;
case 44:return 81;
break;
case 45:return 82;
break;
case 46:return 63;
break;
case 47:return 64;
break;
case 48:return 19;
break;
case 49:return 29;
break;
case 50:return 53;
break;
case 51:return 52;
break;
case 52:return 30;
break;
case 53:return 54;
break;
case 54:return 55;
break;
case 55:return 57;
break;
case 56:return 56;
break;
case 57: /*Ignorar*/ 
break;
case 58:return 5
break;
case 59:console.log("error lexico"); analisis.putError("Lexico", yy_.yylloc.first_line+"", yy_.yylloc.first_column+1+"", "Caracter no valido: " + yy_.yytext); 
break;
}
},
rules: [/^(?:(\/\/.*))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:evaluar\b)/i,/^(?:null\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+\b))/i,/^(?:[ \r\t\s\n\f]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}