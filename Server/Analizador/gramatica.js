/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,33],$V2=[1,34],$V3=[1,35],$V4=[1,36],$V5=[1,37],$V6=[1,38],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[2,5,29,30,31,32,33,34,61,63,66,67,69,70,71,72,73,74,75,76,77],$Vi=[1,46],$Vj=[1,67],$Vk=[1,57],$Vl=[1,56],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[2,25],$Vu=[1,70],$Vv=[1,71],$Vw=[29,80],$Vx=[21,26,28],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[21,28,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,63,81],$VM=[21,28,45,46,49,50,51,63,81],$VN=[1,135],$VO=[28,49,63],$VP=[1,140],$VQ=[21,28,35,36,39,40,41,42,43,44,45,46,49,50,51,63,81],$VR=[21,28,39,40,41,42,43,44,45,46,49,50,51,63,81],$VS=[28,49],$VT=[1,161],$VU=[1,162],$VV=[2,61],$VW=[1,189];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"IF":9,"WHILE":10,"SWITCH":11,"DO":12,"FOR":13,"BREAK":14,"CONTINUE":15,"RETURN":16,"PRINT":17,"METODO":18,"FUNCION":19,"LLAMADAFUNCION":20,"PComa":21,"VECTORES":22,"LLAMADAVECTOR":23,"TIPO":24,"LISTAVARIABLES":25,"Igual":26,"EXPRESION":27,"Coma":28,"Id":29,"resString":30,"resChar":31,"resBool":32,"resInt":33,"resDouble":34,"Mas":35,"Menos":36,"Por":37,"Div":38,"MayorQue":39,"MenorQue":40,"Igualdad":41,"Distinto":42,"MayorIgual":43,"MenorIgual":44,"And":45,"Or":46,"Not":47,"ParA":48,"ParC":49,"Interrogacion":50,"DosPuntos":51,"Cadena":52,"Caracter":53,"Entero":54,"Decimal":55,"Verdadero":56,"Falso":57,"INCREMENTALES":58,"Incremento":59,"Decremento":60,"resIf":61,"LlaveA":62,"LlaveC":63,"ELSE":64,"resElse":65,"resWhile":66,"resSwitch":67,"CASE":68,"resCase":69,"resDefault":70,"resDo":71,"resFor":72,"resBreak":73,"resContinue":74,"resReturn":75,"resWrite":76,"resVoid":77,"PARAMETRO":78,"LISTAEXPRESION":79,"CorA":80,"CorC":81,"resNew":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"PComa",26:"Igual",28:"Coma",29:"Id",30:"resString",31:"resChar",32:"resBool",33:"resInt",34:"resDouble",35:"Mas",36:"Menos",37:"Por",38:"Div",39:"MayorQue",40:"MenorQue",41:"Igualdad",42:"Distinto",43:"MayorIgual",44:"MenorIgual",45:"And",46:"Or",47:"Not",48:"ParA",49:"ParC",50:"Interrogacion",51:"DosPuntos",52:"Cadena",53:"Caracter",54:"Entero",55:"Decimal",56:"Verdadero",57:"Falso",59:"Incremento",60:"Decremento",61:"resIf",62:"LlaveA",63:"LlaveC",65:"resElse",66:"resWhile",67:"resSwitch",69:"resCase",70:"resDefault",71:"resDo",72:"resFor",73:"resBreak",74:"resContinue",75:"resReturn",76:"resWrite",77:"resVoid",80:"CorA",81:"CorC",82:"resNew"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[7,5],[7,3],[8,4],[25,3],[25,1],[24,1],[24,1],[24,1],[24,1],[24,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,3],[27,5],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[58,2],[58,2],[9,8],[64,9],[64,4],[64,0],[10,7],[11,7],[68,5],[68,5],[68,5],[68,5],[68,3],[12,9],[13,14],[14,2],[15,2],[16,3],[16,2],[17,5],[18,7],[18,8],[19,7],[19,8],[78,4],[78,2],[20,3],[20,4],[79,3],[79,1],[22,11],[22,9],[23,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("reconocio la gramatica"); return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 25: case 81: case 85:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 18:
 this.$ = $$[$0]; 
break;
case 17: case 19: case 21: case 23: case 60: case 73: case 74: case 76: case 77: case 78: case 79:
 this.$ = $$[$0-1]; 
break;
case 20:
 console.error("Error Sintactico", this._$.first_line, this._$.first_column,"Token no valido: " + yytext); 
break;
case 22:
 console.log("reconocio una declaracion sin expresion"); 
break;
case 24: case 84:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 26: case 27: case 28: case 29: case 30: case 47: case 48: case 51: case 52: case 53: case 54: case 55:
this.$ = $$[$0];
break;
case 31:
this.$ = $$[$0-2] + $$[$0];
break;
case 32:
this.$ = $$[$0-2] - $$[$0];
break;
case 33:
this.$ = $$[$0-2] * $$[$0];
break;
case 34:
this.$ = $$[$0-2] / $$[$0];
break;
case 35:
this.$ = $$[$0-2] > $$[$0];
break;
case 36:
this.$ = $$[$0-2] < $$[$0];
break;
case 37:
this.$ = $$[$0-2] == $$[$0];
break;
case 38:
this.$ = $$[$0-2] != $$[$0];
break;
case 39:
this.$ = $$[$0-2] >= $$[$0];
break;
case 40:
this.$ = $$[$0-2] <= $$[$0];
break;
case 41:
this.$ = $$[$0-2] && $$[$0];
break;
case 42:
this.$ = $$[$0-2] || $$[$0];
break;
case 43:
this.$ = !$$[$0];
break;
case 44:
this.$ = -$$[$0];
break;
case 45:
this.$ = $$[$0-1];
break;
case 46:
 this.$ = $$[$0-4] + "?" + $$[$0-2] + ":" + $$[$0]; 
break;
case 49: case 50:
this.$ = Number($$[$0]);
break;
case 56: case 57:
this.$ = $$[$0-1]+$$[$0];
break;
case 58:
 this.$ = "if " + $$[$0-5] + " ins " + $$[$0-2] + " else " +$$[$0]; 
break;
case 59:
 this.$ = "exp " + $$[$0-5] + " ins " + " else " +$$[$0-2]; 
break;
case 62:
 this.$ = $$[$0-4]+$$[$0-1];
break;
case 63:
 this.$ = $$[$0-4] + $$[$0-1];
break;
case 64: case 66: case 67:
 this.$ = $$[$0-1]+$$[$0];
break;
case 65:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 68:
 this.$ = $$[$0];
break;
case 69:
 this.$ = $$[$0-6]+" "+$$[$0-2];
break;
case 70:
 this.$ = "De " + $$[$0-8] + " as " + $$[$0-6] + " Inc " + $$[$0-4] + " ins " + $$[$0-1]; 
break;
case 71: case 72:
 this.$ = $$[$0-1];
break;
case 75:
 this.$ = $$[$0-2];
break;
case 80:
 this.$ = $$[$0-3]; this.$.push($$[$0]); 
break;
case 82:
this.$ = $$[$0-2];
break;
case 83:
 this.$ = $$[$0-3];
break;
case 86:
 this.$ = $$[$0-10] + " " + $$[$0-9] + " " + $$[$0-2]; 
break;
case 87:
 this.$= $$[$0-8] + " " + $$[$0-7]+ " " + $$[$0-2]; 
break;
case 88:
 this.$= $$[$0-3] + $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{1:[3]},{2:$V0,5:[1,39],6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),{21:[1,41]},o($Vh,[2,18]),{21:[1,42]},o($Vh,[2,20]),{25:43,29:[1,44]},{26:[1,45],28:$Vi},{48:[1,47]},{48:[1,48]},{48:[1,49]},{62:[1,50]},{48:[1,51]},{21:[1,52]},{21:[1,53]},{20:65,21:[1,55],23:66,27:54,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{48:[1,68]},{29:[1,69]},o([26,28],$Vt,{48:$Vu,80:$Vv}),o($Vw,[2,26]),o($Vw,[2,27]),o($Vw,[2,28]),o($Vw,[2,29]),o($Vw,[2,30]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,17]),o($Vh,[2,19]),{21:[1,73],26:[1,72],28:$Vi},o($Vx,$Vt,{48:[1,74],80:[1,75]}),{20:65,23:66,27:76,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{29:[1,77]},{20:65,23:66,27:78,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:79,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:80,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{2:$V0,4:81,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{24:82,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6},o($Vh,[2,71]),o($Vh,[2,72]),{21:[1,83],35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK},o($Vh,[2,74]),{20:65,23:66,27:97,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:98,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:99,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),o($VL,[2,55],{48:$Vu,80:$Vv}),{20:65,23:66,27:100,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{48:[1,101]},{20:65,23:66,27:104,29:$Vj,36:$Vk,47:$Vl,48:$Vm,49:[1,102],52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,79:103},{20:65,23:66,27:105,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:106,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},o($Vh,[2,22]),{24:109,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,49:[1,107],78:108},{81:[1,110]},{21:[1,111],35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK},o($Vx,[2,24]),{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,112],50:$VK},{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,113],50:$VK},{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,114],50:$VK},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,115],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{29:[1,116]},o($Vh,[2,73]),{20:65,23:66,27:117,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:118,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:119,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:120,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:121,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:122,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:123,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:124,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:125,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:126,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:127,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:128,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:129,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},o($VM,[2,43],{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o($VL,[2,44]),{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,130],50:$VK},{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,131],50:$VK},{24:109,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,49:[1,132],78:133},o($VL,[2,82]),{28:$VN,49:[1,134]},o($VO,[2,85],{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK}),{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK,81:[1,136]},{21:[1,137],35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK},{62:[1,138]},{28:$VP,49:[1,139]},{29:[1,141]},{26:[1,142]},o($Vh,[2,23]),{62:[1,143]},{62:[1,144]},{62:[1,145]},{66:[1,146]},{26:[1,147]},o($VQ,[2,31],{37:$VA,38:$VB}),o($VQ,[2,32],{37:$VA,38:$VB}),o($VL,[2,33]),o($VL,[2,34]),o($VR,[2,35],{35:$Vy,36:$Vz,37:$VA,38:$VB}),o($VR,[2,36],{35:$Vy,36:$Vz,37:$VA,38:$VB}),o($VR,[2,37],{35:$Vy,36:$Vz,37:$VA,38:$VB}),o($VR,[2,38],{35:$Vy,36:$Vz,37:$VA,38:$VB}),o($VR,[2,39],{35:$Vy,36:$Vz,37:$VA,38:$VB}),o($VR,[2,40],{35:$Vy,36:$Vz,37:$VA,38:$VB}),o($VM,[2,41],{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH}),o([21,28,46,49,50,51,63,81],[2,42],{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI}),{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK,51:[1,148]},o($VL,[2,45]),{21:[1,149]},{62:[1,150]},{28:$VP,49:[1,151]},o($VL,[2,83]),{20:65,23:66,27:152,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},o($VL,[2,88]),o($Vh,[2,21]),{2:$V0,4:153,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{62:[1,154]},{24:155,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6},o($VS,[2,81]),{62:[1,157],82:[1,156]},{2:$V0,4:158,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:159,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{68:160,69:$VT,70:$VU},{48:[1,163]},{20:65,23:66,27:164,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{20:65,23:66,27:165,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},o($Vh,[2,75]),{2:$V0,4:166,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{62:[1,167]},o($VO,[2,84],{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK}),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,168],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:169,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{29:[1,170]},{24:171,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6},{20:65,23:66,27:104,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,79:172},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,173],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,174],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{63:[1,175]},{52:[1,177],53:[1,176],54:[1,179],55:[1,178]},{51:[1,180]},{20:65,23:66,27:181,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{21:[1,182],35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK},o([21,28,49,51,63,81],[2,46],{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK}),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,183],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:184,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($Vh,[2,78]),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,185],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($VS,[2,80]),{80:[1,186]},{28:$VN,63:[1,187]},o($Vh,$VV,{64:188,65:$VW}),o($Vh,[2,62]),o($Vh,[2,63]),{51:[1,190]},{51:[1,191]},{51:[1,192]},{51:[1,193]},{2:$V0,4:194,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,195],50:$VK},{20:65,23:66,27:196,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},o($Vh,[2,76]),{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,197],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($Vh,[2,79]),{20:65,23:66,27:198,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{21:[1,199]},o($Vh,[2,58]),{61:[1,200],62:[1,201]},{2:$V0,4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:203,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:204,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:205,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[2,68],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{21:[1,206]},{21:[1,207],35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK},o($Vh,[2,77]),{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,50:$VK,81:[1,208]},o($Vh,[2,87]),{48:[1,209]},{2:$V0,4:210,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,68:211,69:$VT,70:$VU,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,68:212,69:$VT,70:$VU,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,68:213,69:$VT,70:$VU,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,68:214,69:$VT,70:$VU,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($Vh,[2,69]),{29:[1,216],58:215},{21:[1,217]},{20:65,23:66,27:218,29:$Vj,36:$Vk,47:$Vl,48:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,219],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{63:[2,64]},{63:[2,65]},{63:[2,66]},{63:[2,67]},{49:[1,220]},{59:[1,221],60:[1,222]},o($Vh,[2,86]),{35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,49:[1,223],50:$VK},o($Vh,[2,60]),{62:[1,224]},{49:[2,56]},{49:[2,57]},{62:[1,225]},{2:$V0,4:226,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,228],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{2:$V0,6:40,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,22:18,23:19,24:21,25:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,34:$V6,61:$V7,63:[1,229],66:$V8,67:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($Vh,[2,70]),o($Vh,$VV,{64:230,65:$VW}),o($Vh,[2,59])],
defaultActions: {39:[2,1],211:[2,64],212:[2,65],213:[2,66],214:[2,67],221:[2,56],222:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const evaluar = require('../Clases/Evaluar');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*Ignorar*/ 
break;
case 1: /*Ignorar*/
break;
case 2:return 'evaluar'; 
break;
case 3:return 'resNull';
break;
case 4:return 77;
break;
case 5:return 76;
break;
case 6:return 75;
break;
case 7:return 73;
break;
case 8:return 74;
break;
case 9:return 82;
break;
case 10:return 33;
break;
case 11:return 34;
break;
case 12:return 31;
break;
case 13:return 32;
break;
case 14:return 30;
break;
case 15:return 61;
break;
case 16:return 65;
break;
case 17:return 72;
break;
case 18:return 66;
break;
case 19:return 71;
break;
case 20:return 67;
break;
case 21:return 69;
break;
case 22:return 70;
break;
case 23:return 59;
break;
case 24:return 60;
break;
case 25:return 35;
break;
case 26:return 36;
break;
case 27:return 37;
break;
case 28:return 38;
break;
case 29:return 44
break;
case 30:return 40
break;
case 31:return 43
break;
case 32:return 39
break;
case 33:return 41
break;
case 34:return 42
break;
case 35:return 26
break;
case 36:return 45;
break;
case 37:return 46;
break;
case 38:return 47;
break;
case 39:return 56;
break;
case 40:return 57;
break;
case 41:return 48;
break;
case 42:return 49;
break;
case 43:return 80;
break;
case 44:return 81;
break;
case 45:return 62;
break;
case 46:return 63;
break;
case 47:return 21;
break;
case 48:return 28;
break;
case 49:return 51;
break;
case 50:return 50;
break;
case 51:return 29;
break;
case 52:return 52;
break;
case 53:return 'Chaar';
break;
case 54:return 55;
break;
case 55:return 54;
break;
case 56: /*Ignorar*/ 
break;
case 57:return 5
break;
case 58: console.error('este es un error lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+1); 
break;
}
},
rules: [/^(?:(\/\/.*))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:evaluar\b)/i,/^(?:null\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:([0-9]+\b))/i,/^(?:[ \r\t\s\n\f]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}