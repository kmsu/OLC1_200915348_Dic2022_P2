/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,29],$V2=[1,35],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[5,20,21,25,33,34,35,36,37,57,60,61,63,65,66,67,71,72,73,74],$Vi=[1,42],$Vj=[1,61],$Vk=[1,54],$Vl=[1,53],$Vm=[1,52],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[2,28],$Vu=[28,30,32],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[23,32,38,39,40,41,42,43,44,45,46,47,48,49],$VI=[23,32,48,49],$VJ=[1,121],$VK=[23,32,38,39,42,43,44,45,46,47,48,49],$VL=[23,32,42,43,44,45,46,47,48,49],$VM=[23,28],$VN=[1,137],$VO=[1,138],$VP=[2,59],$VQ=[1,160],$VR=[21,22,39,50,51,52,53,54,55,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"IF":9,"WHILE":10,"SWITCH":11,"DO":12,"FOR":13,"BREAK":14,"CONTINUE":15,"RETURN":16,"PRINT":17,"METODO":18,"FUNCION":19,"resVoid":20,"Id":21,"ParA":22,"ParC":23,"LlaveA":24,"LlaveC":25,"PARAMETRO":26,"TIPO":27,"Coma":28,"LISTAVARIABLES":29,"Igual":30,"EXPRESION":31,"PComa":32,"resString":33,"resChar":34,"resBool":35,"resInt":36,"resDouble":37,"Mas":38,"Menos":39,"Por":40,"Div":41,"MayorQue":42,"MenorQue":43,"Igualdad":44,"Distinto":45,"MayorIgual":46,"MenorIgual":47,"And":48,"Or":49,"Not":50,"Cadena":51,"Caracter":52,"Entero":53,"Decimal":54,"Verdadero":55,"Falso":56,"resIf":57,"ELSE":58,"resElse":59,"resWhile":60,"resSwitch":61,"CASE":62,"resCase":63,"DosPuntos":64,"resDefault":65,"resDo":66,"resFor":67,"RELACIONAL":68,"Incremento":69,"Decremento":70,"resBreak":71,"resContinue":72,"resReturn":73,"resWrite":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"resVoid",21:"Id",22:"ParA",23:"ParC",24:"LlaveA",25:"LlaveC",28:"Coma",30:"Igual",32:"PComa",33:"resString",34:"resChar",35:"resBool",36:"resInt",37:"resDouble",38:"Mas",39:"Menos",40:"Por",41:"Div",42:"MayorQue",43:"MenorQue",44:"Igualdad",45:"Distinto",46:"MayorIgual",47:"MenorIgual",48:"And",49:"Or",50:"Not",51:"Cadena",52:"Caracter",53:"Entero",54:"Decimal",55:"Verdadero",56:"Falso",57:"resIf",59:"resElse",60:"resWhile",61:"resSwitch",63:"resCase",64:"DosPuntos",65:"resDefault",66:"resDo",67:"resFor",69:"Incremento",70:"Decremento",71:"resBreak",72:"resContinue",73:"resReturn",74:"resWrite"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[18,7],[18,8],[19,7],[19,8],[26,4],[26,2],[7,5],[7,3],[8,4],[29,3],[29,1],[27,1],[27,1],[27,1],[27,1],[27,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[9,8],[58,9],[58,4],[58,0],[10,7],[11,7],[62,5],[62,5],[62,5],[62,5],[62,3],[12,9],[13,17],[13,17],[68,1],[68,1],[68,1],[68,1],[14,2],[15,2],[16,3],[16,2],[17,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("reconocio la cadena") 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 23: case 28:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4:
 console.error("Sintactico", this._$.first_line, this._$.first_column,"Caracter no valido: " + yytext); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 70: case 71: case 72: case 73:
 this.$ = $$[$0]; 
break;
case 18: case 20:
 this.$ = new classFuncion.default($$[$0-5], null, $$[$0-1]); 
break;
case 19: case 21:
 this.$ = new classFuncion.default($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 22:
 this.$ = $$[$0-3]; this.$.push($$[$0]); 
break;
case 24:
 this.$ = $$[$0-1]; 
break;
case 25:
 console.log("reconocio una declaracion sin expresion"); 
break;
case 26:
 console.log("reconocio una asignaicion"); 
break;
case 27:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 29: case 30: case 31: case 32: case 33: case 46: case 49: case 50: case 51: case 52: case 53: case 54: case 55:
this.$ = $$[$0];
break;
case 34: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45:
this.$ = $$[$0-2] + $$[$0];
break;
case 35:
this.$ = $$[$0-2] - $$[$0];
break;
case 36:
this.$ = $$[$0-2] * $$[$0];
break;
case 37:
this.$ = $$[$0-2] / $$[$0];
break;
case 47:
this.$ = -$$[$0];
break;
case 48:
this.$ = $$[$0-1];
break;
case 56:
 this.$ = new classIf.default($$[$0-5], $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = new classElse.default($$[$0-5], $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = new classElse.default(null, $$[$0-1], null); 
break;
case 60:
 this.$ = new classWhile.default($$[$0-4], $$[$0-1]);
break;
case 61:
 this.$ = new classSwitch.default($$[$0-4], $$[$0-1]);
break;
case 62: case 63: case 64: case 65:
 this.$ = new classCase.default($$[$0-3], $$[$0-1], $$[$0]);
break;
case 66:
 this.$ = new classCase.default(null, $$[$0], null);
break;
case 67:
 this.$ = new classDo.default($$[$0-6], $$[$0-2]);
break;
case 68: case 69:
 this.$ = new classFor.default($$[$0-13], $$[$0-11], $$[$0-7], $$[$0-5], $$[$0-4], $$[$0-1]); 
break;
case 74: case 75:
 this.$ = new classBreak.default($$[$0-1]);
break;
case 76:
 this.$ = new classReturn.default($$[$0-2], $$[$0-1]); 
break;
case 77:
 this.$ = new classReturn.default($$[$0-1], null); 
break;
case 78:
 this.$ = new classPrint.default($$[$0], null);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{1:[3]},{5:[1,36],6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,3]),{6:38,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),{21:[1,40],29:39},{28:$Vi,30:[1,41]},{22:[1,43]},{22:[1,44]},{22:[1,45]},{24:[1,46]},{22:[1,47]},{32:[1,48]},{32:[1,49]},{21:$Vj,22:$Vk,31:50,32:[1,51],39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{22:[1,62]},{21:[1,63]},{21:[2,29]},{21:[2,30]},{21:[2,31]},{21:[2,32]},{21:[2,33]},o([28,30],$Vt),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),{28:$Vi,30:[1,64],32:[1,65]},o($Vu,$Vt,{22:[1,66]}),{21:$Vj,22:$Vk,31:67,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:[1,68]},{21:$Vj,22:$Vk,31:69,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:70,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:71,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{2:$V0,4:72,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{27:73,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},o($Vh,[2,74]),o($Vh,[2,75]),{32:[1,74],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},o($Vh,[2,77]),{21:$Vj,22:$Vk,31:87,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:88,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:89,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),{21:$Vj,22:$Vk,31:90,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{22:[1,91]},{21:$Vj,22:$Vk,31:92,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},o($Vh,[2,25]),{23:[1,93],26:94,27:95,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},{32:[1,96],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},o($Vu,[2,27]),{23:[1,97],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{23:[1,98],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{23:[1,99],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,100],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{21:[1,101]},o($Vh,[2,76]),{21:$Vj,22:$Vk,31:102,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:103,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:104,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:105,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:106,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:107,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:108,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:109,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:110,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:111,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:112,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{21:$Vj,22:$Vk,31:113,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},o($VI,[2,46],{38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE}),o($VH,[2,47]),{23:[1,114],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{23:[1,115],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{23:[1,116],26:117,27:95,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},{32:[1,118],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{24:[1,119]},{23:[1,120],28:$VJ},{21:[1,122]},o($Vh,[2,26]),{24:[1,123]},{24:[1,124]},{24:[1,125]},{60:[1,126]},{30:[1,127]},o($VK,[2,34],{40:$Vx,41:$Vy}),o($VK,[2,35],{40:$Vx,41:$Vy}),o($VH,[2,36]),o($VH,[2,37]),o($VL,[2,38],{38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o($VL,[2,39],{38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o($VL,[2,40],{38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o($VL,[2,41],{38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o($VL,[2,42],{38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o($VL,[2,43],{38:$Vv,39:$Vw,40:$Vx,41:$Vy}),o($VI,[2,44],{38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE}),o([23,32,49],[2,45],{38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VH,[2,48]),{32:[1,128]},{24:[1,129]},{23:[1,130],28:$VJ},o($Vh,[2,24]),{2:$V0,4:131,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{24:[1,132]},{27:133,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},o($VM,[2,23]),{2:$V0,4:134,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:135,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{62:136,63:$VN,65:$VO},{22:[1,139]},{21:$Vj,22:$Vk,31:140,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},o($Vh,[2,78]),{2:$V0,4:141,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{24:[1,142]},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,143],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:144,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{21:[1,145]},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,146],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,147],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{25:[1,148]},{51:[1,150],52:[1,149],53:[1,152],54:[1,151]},{64:[1,153]},{21:$Vj,22:$Vk,31:154,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{32:[1,155],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,156],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:157,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,20]),{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,158],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($VM,[2,22]),o($Vh,$VP,{58:159,59:$VQ}),o($Vh,[2,60]),o($Vh,[2,61]),{64:[1,161]},{64:[1,162]},{64:[1,163]},{64:[1,164]},{2:$V0,4:165,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{23:[1,166],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{21:[1,167]},o($Vh,[2,18]),{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,168],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,21]),o($Vh,[2,56]),{24:[1,170],57:[1,169]},{2:$V0,4:171,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:172,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:173,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:174,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[2,66],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{32:[1,175]},{42:[1,177],43:[1,178],46:[1,179],47:[1,180],68:176},o($Vh,[2,19]),{22:[1,181]},{2:$V0,4:182,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,62:183,63:$VN,65:$VO,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,62:184,63:$VN,65:$VO,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,62:185,63:$VN,65:$VO,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,62:186,63:$VN,65:$VO,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,67]),{21:$Vj,22:$Vk,31:187,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),{21:$Vj,22:$Vk,31:188,39:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,189],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{25:[2,62]},{25:[2,63]},{25:[2,64]},{25:[2,65]},{32:[1,190],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},{23:[1,191],38:$Vv,39:$Vw,40:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG},o($Vh,[2,58]),{21:[1,192]},{24:[1,193]},{69:[1,194],70:[1,195]},{2:$V0,4:196,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{23:[1,197]},{23:[1,198]},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,199],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{24:[1,200]},{24:[1,201]},o($Vh,$VP,{58:202,59:$VQ}),{2:$V0,4:203,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{2:$V0,4:204,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,57]),{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,205],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},{6:37,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,21:$V2,25:[1,206],27:18,29:19,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,57:$V8,60:$V9,61:$Va,66:$Vb,67:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg},o($Vh,[2,68]),o($Vh,[2,69])],
defaultActions: {30:[2,29],31:[2,30],32:[2,31],33:[2,32],34:[2,33],36:[2,1],183:[2,62],184:[2,63],185:[2,64],186:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const evaluar = require('../Clases/Evaluar');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*Ignorar*/ 
break;
case 1: /*Ignorar*/
break;
case 2:return 'evaluar'; 
break;
case 3:return 'resNull';
break;
case 4:return 20;
break;
case 5:return 74;
break;
case 6:return 73;
break;
case 7:return 71;
break;
case 8:return 72;
break;
case 9:return 36;
break;
case 10:return 37;
break;
case 11:return 34;
break;
case 12:return 35;
break;
case 13:return 33;
break;
case 14:return 57;
break;
case 15:return 59;
break;
case 16:return 67;
break;
case 17:return 60;
break;
case 18:return 66;
break;
case 19:return 61;
break;
case 20:return 63;
break;
case 21:return 65;
break;
case 22:return 69;
break;
case 23:return 70;
break;
case 24:return 38;
break;
case 25:return 39;
break;
case 26:return 40;
break;
case 27:return 41;
break;
case 28:return 47
break;
case 29:return 43
break;
case 30:return 46
break;
case 31:return 42
break;
case 32:return 44
break;
case 33:return 45
break;
case 34:return 30
break;
case 35:return 48;
break;
case 36:return 49;
break;
case 37:return 50;
break;
case 38:return 55;
break;
case 39:return 56;
break;
case 40:return 22;
break;
case 41:return 23;
break;
case 42:return 'CorA';
break;
case 43:return 'CorC';
break;
case 44:return 24;
break;
case 45:return 25;
break;
case 46:return 32;
break;
case 47:return 28;
break;
case 48:return 64;
break;
case 49:return 'Interrogacion';
break;
case 50:return 21;
break;
case 51:return 51;
break;
case 52:return 'Chaar';
break;
case 53:return 54;
break;
case 54:return 53;
break;
case 55: /*Ignorar*/ 
break;
case 56:return 5
break;
case 57: console.error('este es un error lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+1); 
break;
}
},
rules: [/^(?:(\/\/.*))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:evaluar\b)/i,/^(?:null\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:([0-9]+\b))/i,/^(?:[ \r\t\s\n\f]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}